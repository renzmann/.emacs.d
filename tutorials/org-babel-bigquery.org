#+TITLE:Setting up Org Babel for BigQuery
#+AUTHOR: Robert Enzmann
#+OPTIONS: ^:nil
#+PROPERTY: header-args :exports both
#+PROPERTY: header-args:sql :engine bq :results raw

* Org Settings/Options
Disabling the underscore-to-subscript behavior when printing a table that
has underscores in a column name is done with this document-level option:

#+begin_src org
  #+OPTIONS: ^:nil
#+end_src

Then, to ensure table results are exported alongside the query when converting
to HTML or previewing in GitHub, we set this property globally:

#+begin_src org
  #+PROPERTY: header-args :exports both
#+end_src

GitHub can have some trouble picking up on the ~:exports~ though.  In particular,
if a table doesn't have an explicitly underlined header row, it won't render.
In that case, some of the blocks still need their own ~:exports both~ to ensure
the table shows up on the GitHub rich view.

And finally, the ~:engine bq~ property for ~sql~ blocks is what we're going to patch
in this document so that we can get nice ~C-c C-c~ execution.

#+begin_src org
  PROPERTY: header-args:sql :engine bq :results raw
#+end_src

The ~:results raw~ is also required to make sure our hacky patch comes back with a
string instead of data/a table before we get a chance to format it.

* Login and setup
When I need to authenticate to GCP with my single-sign-on (SSO), I use this.

#+begin_src shell :results none
  gcloud auth login
#+end_src

Then, set the project in which the tables reside

#+begin_src shell :results verbatim
  gcloud projects list
#+end_src

#+RESULTS:
: PROJECT_ID              NAME              PROJECT_NUMBER
: driven-presence-375016  My First Project  199710904639

#+begin_src shell :results none
  gcloud config set project driven-presence-375016
#+end_src

Then, try querying:

#+begin_src shell :results table :exports both
  bq query --format=csv --nouse_legacy_sql '
    SELECT
          word,
          sum(word_count) AS total_usage
    FROM
          `bigquery-public-data.samples.shakespeare`
    WHERE
          LENGTH(word) > 5
    GROUP BY
           word
    ORDER BY
          total_usage desc
    limit 5;'
#+end_src

#+RESULTS:
| word   | total_usage |
| should |        1505 |
| Exeunt |        1052 |
| father |         837 |
| cannot |         745 |
| before |         658 |

Both the ~--format=sparse~ and ~--format=csv~ options are handled well when viewing
within Org, but ~--format=json~ is the easiest for the computer to parse, and what
we'll use alongside a special function to convert it into an org table.  At the
command line itself, I tend to use ~--format=pretty~.

* Setting up a Babel Backend
Since I know that the command line version works pretty well, I just hack around
it using a small library called [[https://github.com/noonker/json-to-org-table][json-to-org-table]]:

#+begin_src emacs-lisp :results none
  (defun org-babel-execute:bq (orig-fun body params)
    (if (string-equal-ignore-case (cdr (assq :engine params)) "bq")
        (json-to-org-table-parse-json-string (org-babel-execute:shell (concat "bq query --format=json --nouse_legacy_sql '" body "'") params))
      (org-babel-execute:sql body params)))

  (advice-add 'org-babel-execute:sql :around #'org-babel-execute:bq)
#+end_src

By advising with =:around=, we capture any call to ~org-babel-execute:sql~, and
check if the =:engine= argument is ="bq"=, ignoring capitalization.  If it is, then
we execute our query through ~org-babel-execute:shell~, which we already saw works
pretty well.  If not, just pass through to the old ~org-babel-execute:sql~.

Additionally, in order to guarantee the GitHub render of our table, we need to
ensure that there's a line under our columns.

Now, we can execute SQL blocks using good old-fashioned ~C-c C-c~.

#+begin_src sql
  SELECT
      word,
      sum(word_count) AS total_usage
  FROM
      `bigquery-public-data.samples.shakespeare`
  WHERE
      LENGTH(word) > 5
  GROUP BY
      word
  ORDER BY
      total_usage DESC
  LIMIT
      5;
#+end_src

#+RESULTS:
| total_usage | word   |
|-------------+--------|
|        1505 | should |
|        1052 | Exeunt |
|         837 | father |
|         745 | cannot |
|         658 | before |
